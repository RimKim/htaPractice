문제 1. 다음 중 틀린 것을 고르시오.
1. @GeneratedValue(strategy = GenerationType.IDENTITY)은 oracle DB에서 사용이 불가하다.
2. 영속성 컨테스트란 데이터베이스 사이에서 객체를 보관하는 가상의 데이터베이스 같은 것이다.
3.에러 발생시 ManyToMany는 OneToOne, OneToMany, ManyToOne보다 곤란할 경우가 높다. 
4. 지연로딩은 JOIN SQL로 한번에 연관된 객체까지 미리 조회 가능하며 sql실행을 한번에 진행한다.


-------------------------------------------------------------------------------------------

문제 2. 사용자(User)는 1개 이상의 계좌(Account)를 가질 수 있다.
첨부사진을 참고하여 테이블을 만들 경우 아래 빈칸(______)을 채우시오.

public class User{
	@Id @Column(name = "user_id")
	private Long id;

	@NonNull @Column(name = "user_name")
	private String name;

	@_______(mappedBy = "______")
	private List<Account> accounts = new ArrayList<Account>();
}

public class Account{
	@Id @Column(name = "account_id")
	private Long id;

	@NonNull @Column(name = "account_name")
	private String accountName;

	private int deposit;

	@________(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id")
	private User user;
}

-------------------------------------------------------------------------------------------

문제 3-1.
다음 중 틀린 것을 고르시오.
1. 객체는 참조로 연관관계를 맺습니다.
2. 테이블은 기본 키로 연관관계를 맺습니다.
3. 참조를 사용하는 객체의 연관관계는 단방향입니다. 
4. 외래 키를 사용하는 테이블의 연관관계는 양방향입니다. 

문제 3-2.
다음 중 Entity 클래스의 필드 선언 시 private long id로 선언하지 않고 private Long id으로 선언하는 이유를 설명하시오.

-------------------------------------------------------------------------------------------

4. 다음과 같은 결과화면이 출력되도록 밑줄 친 부분에 들어갈 알맞은 정답을 작성하시오.

[결과화면]
Hibernate: 
    select
        member0_.id as id1_0_0_,
        member0_.age as age2_0_0_,
        member0_.username as username3_0_0_,
        member0_.team_id as team_id4_0_0_ 
    from
        Member member0_ 
    where
        member0_.id=?
OOO

Hibernate: 
    select
        team0_.id as id1_1_0_,
        team0_.name as name2_1_0_ 
    from
        Team team0_ 
    where
        team0_.id=?
OOO

[문제]
public class RunningTest {

	public static void main(String[] args) {
		
		__________ em = DBUtil.getEntityManager();
		_________________ tx = em.getTransaction();
		tx.begin();
		
		
		 Member m1 = em.____(__________, 1l);
		 System.out.println(m1.getName());
		 
		 
		 
		 System.out.println(m1.getTeam().getName());
